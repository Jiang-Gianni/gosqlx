// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteConnection = `-- name: DeleteConnection :exec
delete from connection where id = ?
`

func (q *Queries) DeleteConnection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConnection, id)
	return err
}

const getAllConnections = `-- name: GetAllConnections :many
select id, id_rdms, ssl, name, host, port, datasource, user, password from connection
`

func (q *Queries) GetAllConnections(ctx context.Context) ([]Connection, error) {
	rows, err := q.db.QueryContext(ctx, getAllConnections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ID,
			&i.IDRdms,
			&i.Ssl,
			&i.Name,
			&i.Host,
			&i.Port,
			&i.Datasource,
			&i.User,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRdms = `-- name: GetAllRdms :many
select id, system from rdms
`

func (q *Queries) GetAllRdms(ctx context.Context) ([]Rdm, error) {
	rows, err := q.db.QueryContext(ctx, getAllRdms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rdm
	for rows.Next() {
		var i Rdm
		if err := rows.Scan(&i.ID, &i.System); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConnectionById = `-- name: GetConnectionById :one
select id, id_rdms, ssl, name, host, port, datasource, user, password from connection where id = ?
`

func (q *Queries) GetConnectionById(ctx context.Context, id int64) (Connection, error) {
	row := q.db.QueryRowContext(ctx, getConnectionById, id)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.IDRdms,
		&i.Ssl,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Datasource,
		&i.User,
		&i.Password,
	)
	return i, err
}

const insertConnection = `-- name: InsertConnection :one
insert into connection(id_rdms, ssl, name, host, port, datasource, user, password)
values (?, ?, ?, ?, ?, ?, ?, ?) returning id, id_rdms, ssl, name, host, port, datasource, user, password
`

type InsertConnectionParams struct {
	IDRdms     int64
	Ssl        sql.NullBool
	Name       string
	Host       string
	Port       int64
	Datasource string
	User       string
	Password   string
}

func (q *Queries) InsertConnection(ctx context.Context, arg InsertConnectionParams) (Connection, error) {
	row := q.db.QueryRowContext(ctx, insertConnection,
		arg.IDRdms,
		arg.Ssl,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.Datasource,
		arg.User,
		arg.Password,
	)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.IDRdms,
		&i.Ssl,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Datasource,
		&i.User,
		&i.Password,
	)
	return i, err
}

const updateConnection = `-- name: UpdateConnection :one
update connection
set id_rdms = ?,
    ssl = ?,
    name = ?,
    host = ?,
    port = ?,
    datasource = ?,
    user = ?,
    password = ?
where id = ?
returning id, id_rdms, ssl, name, host, port, datasource, user, password
`

type UpdateConnectionParams struct {
	IDRdms     int64
	Ssl        sql.NullBool
	Name       string
	Host       string
	Port       int64
	Datasource string
	User       string
	Password   string
	ID         int64
}

func (q *Queries) UpdateConnection(ctx context.Context, arg UpdateConnectionParams) (Connection, error) {
	row := q.db.QueryRowContext(ctx, updateConnection,
		arg.IDRdms,
		arg.Ssl,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.Datasource,
		arg.User,
		arg.Password,
		arg.ID,
	)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.IDRdms,
		&i.Ssl,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Datasource,
		&i.User,
		&i.Password,
	)
	return i, err
}
